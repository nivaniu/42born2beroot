touch .bash_aliases
touch logs
echo "alias c=clear" >> .bash_aliases
echo "log(){" >> .bash_aliases
echo "echo #* >> /home/nivaniuk/logs" >> .bash_aliases
echo "}" >> .bash_aliases
su - root <<! >/dev/null 2>&1
root
!

lsblk
# Difference between aptitude and apt
# Short answer, Aptitude is higher lvl package manager that encapsulates apt & other
# Aptitude	<- High lvl package manager | Uses apt-get and other it's variances | has UI | better package management
# Apt		<- Lower lvl package manager

# AppArmor VS SELinux
# Both are security modules that are simular to mandatory access control
# So when application is compromised it prevents damage
# Limit ressources that could be used by programs
# AppArmor	<- Easier in use | works with paths | Binds access to programs
# SELinux	<- Harder in use | works with lables | No NFS | Easy to mess up | if done properly could be potentially more secure tho usually just introduces more holes

# Configuring ssh
echo "Port 4242" >> /etc/ssh/sshd_config
echo "PermitRootLogin no" >> /etc/ssh/sshd_config
systemctl stop ssh
systemctl start ssh
echo "10.0.2.15 me" >> /etc/hosts
ssh nivaniuk@me -p 4242

# Installing packages
apt-get install sudo -y
apt install ufw

# Configuring firewall
cd /etc/ufw/applications.d/
ufw status verbose
sudo ufw default deny incoming
sudo ufw allow port 4242 proto tcp
sudo ufw enable
sudo ufw status verbose numbered

# Hostname check
hostname
# Change hostname temporary
hostname someOtherHostName42
# Change hostname permanently
echo "newHostName42" > /etc/hostname
# Change also hostname in /etc/hosts

# Implementing strong password policy below

# Install and condigure sudo following strict rules bewow

# In addition the root user, a user with our login as username has to be present
users

# This user should belong to user42 and sudo groups
# Creating and assigning groups
sudo groupadd user42
getent group | grep user42
sudo usermod -a -G user42,sudo nivaniuk
groups

# Creating a new user and assigning it a group
sudo useradd -g users -G user42,sudo tempuser
sudo deluser --remove-all-files tempuser

# Install strong password policy
cd /etc/pam.d/

# Password changes
cp common-password common-password.bak
sudo nano common-password

# Your password has to expie every 30 days 
nano /etc/login.defs
PASS_MAX_DAYS 30
# min days allowed before modification of a password will be set to 2
nano /etc/login.defs
PASS_MIN_DAYS 2
# User has to receive a warning message 7 days before pass expires 
nano /etc/login.defs
PASS_WARN_AGE 7

# To check user expiery perms
chage -m 2 nivaniuk
chage -m 2 root
chage -W 7 nivaniuk
chage -W 7 root
chage -M 30 root
chage -M 30 nivaniuk
chage -l nivaniuk
chage -l root


# modifying password rules
cat /etc/pam.d/common-password
# need cracklib
apt-get install libpam-cracklib
nano /etc/pam.d/common-password

# file modifications :
# here are the per-package modules (the "Primary" block)
password	requisite	pam_cracklib.so enforce_for_root difok=7 minlen=10 dcredit=-1 ucredit=-1 maxrepeat=3 reject_username
password	[success=1 default=ignore]	pam_unix.so obscure sha512
# here's the fallback if no module succeeds
password	requisite			pam_deny.so
# prime the stack with a positive return value if there isn't one already;
# this avoids us returning an error just because nothing sets a success code
# since the modules above will each just jump around
password	required			pam_permit.so
# and here are more per-package modules (the "Additional" block)

# minlen = minimum password length
# minclass = the minimum number of character types that must be used (i.e., uppercase, lowercase, digits, other)
# maxrepeat = the maximum number of times a single character may be repeated
# maxclassrepeat = the maximum number of characters in a row that can be in the same class
# lcredit = maximum number of lowercase characters that will generate a credit
# ucredit = maximum number of uppercase characters that will generate a credit
# dcredit = maximum number of digits that will generate a credit
# ocredit = maximum number of other characters that will generate a credit
# difok = the minimum number of characters that must be different from the old password
# remember = the number of passwords that will be remembered by the system so that they cannot be used again
# gecoscheck = whether to check for the words from the passwd entry GECOS string of the user (enabled if the value is not 0)
# dictcheck = whether to check for the words from the cracklib dictionary (enabled if the value is not 0)
# usercheck = whether to check if the password contains the user name in some form (enabled if the value is not 0)
# enforcing = new password is rejected if it fails the check and the value is not 0
# dictpath = path to the cracklib dictionaries. Default is to use the cracklib default.


# end of pam-auth-update config

# password	requisite	pam_cracklib.so enforce_for_root difok=7 minlen=10 dcredit=-1 ucredit=-1 maxrepeat=3 reject_username
# pam_cracklib.so	<-	schema to correct installed lib
# minlen=10		<-	password must be at least 10 chars long
# ucredit=-1		<-	require uppercase
# dcredit=-1		<-	require digits
# maxrepeat=3		<-	no more than 3 consecutive identical chars
# reject_username	<-	No username in the password in any form
# difok=7		<-	At least 7 chars different from prev password | does not work for root since root does not ask for password when changing
# enforce_for_root	<-	by default rules are applicable only to regular users, here we ask to apply them to root aswell

# END PASSWORD PARAMETRAGE

# To change password 
passwd

# Configuring sudo
sudoers=/etc/sudoers.d/
touch /etc/sudoers.d//sudo_config
chmod 0440 /etc/sudoers.d//sudo_config
# Using visudo to modify sudo config file
touch /home/nivaniuk/sudo_config
/usr/sbin/visudo -f /home/nivaniuk/sudo_config
cd /home/nivaniuk/
cp sudo_config /etc/sudoers.d/sudo_config
/usr/sbin/visudo -f /etc/sudoers.d/sudo_config

# BEGIN sudo_config file

# Drop this file into /etc/sudoers.d/ folder
# Edit this file with /usr/sbin/visudo -f /etc/sudoers.d/sudo_config

# Explicitely setting nbr of tries to 3
Defaults	passwd_tries=3
# Personalised bad password_message
Defaults	badpass_message="Wrong password bruh"
# Setting up logs
Defaults	logfile=/var/log/sudo/sudo_logs
# need more logs input output logs
Defaults        log_input,log_output
Defaults        iolog_dir="/var/log/sudo"
# Enabling tty mode
Defaults	requiretty
# Setting path sudo can use
Defaults	secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"

# END sudo_config file

# Making monitoring.sh script
touch /home/nivaniuk/monitoring.sh

# Content of the file
#!/bin/bash

arch=$(uname -a)
p_cpu=$(cat /proc/cpuinfo | grep 'cpu cores'| tr -d 'cpu cores: \t')
v_cpu=$(grep "^processor" /proc/cpuinfo | wc -l)
t_mem=$(free -m | grep Mem | awk '{print $2}')
used_mem=$(free -m | grep Mem | awk '{print $3}')
p_mem=$(awk "BEGIN {print ($used_mem/$t_mem)*100}")
t_space=$(df -h --total | grep total | awk '{print $2}')
u_space=$(df -h --total | grep total | awk '{print $3}')
p_space=$(df -h --total | grep total | awk '{print $5}')
u_cpu=$(top -bn1 | grep Cpu | awk '{print $2}')
l_b_date=$(who -b | awk '{print $3}')
l_b_time=$(who -b | awk '{print $4}')

nbr_lvm=$(cat /etc/fstab | grep /dev/mapper | wc -l)
# LVM starts with /dev/mapper
# if we have those meaning we are using LVM so it's active
if [[ $nbr_lvm -eq 0 ]]
then
	lvm='no'
else
	lvm='yes'
fi

nbr_tcp_co=$(w| grep " pts/" | awk '{print $3}' | wc -l) 
nbr_usr_co=$(w | head -n 1 | awk '{print $5}')
ip=$(ip addr | grep 'inet ' | tr -t / ' ' | awk '{print $2}' | grep -v 127 | head -n 1)
mac=$(ip addr | grep link/ether | awk '{print $2}' | head -n 1)
sudo_com=$(cat /var/log/sudo/sudo_logs | grep -i command | wc -l)

wall << .
	#Architecture: $arch
	#CPU physical : $p_cpu
	#vCPU : $v_cpu
	#Memory Usage : $used_mem/$t_mem MB (${p_mem::4}%)
	#Disk Usage : $u_space/$t_space ($p_space)
	#CPU load : $u_cpu%
	#Last boot : $l_b_date $l_b_time
	#LVM use : $lvm
	#Connections TCP : $nbr_tcp_co ESTABLISHED
	#User log: $nbr_usr_co
	#Network : IP $ip ($mac)
	#Sudo :  $sudo_com cmd
.

# Schedule program run each 10 min :
crontab -e
*/10 * * * * /home/nivaniuk/monitoring.sh
# Or
9,19,29,39,49,59 * * * * /home/nivaniuk/ monitoring.sh

# Other
head -n 2 /etc/os-release
/usr/sbin/aa-status
ss -tunlp
/usr/sbin/ufw status
# horizontal line :: printf \xE2\x80\x95
# horizontal line :: printf 'xE2x80x95'
uname -a | wall
cat /proc/cpuinfo
lscpu
lscpu
lscpu | egrep 'Model name|Socket|Thread'
cat /proc/cpuinfo
cat /proc/cpuinfo | grep 'cpu cores'| tr -d 'cpu cores: t'
cat /proc/cpuinfo | grep 'cpu cores'| tr -d 'cpu cores: \t'
grep "physical id" /proc/cpuinfo | sort |uniq|wc -l
grep "^processor" /proc/cpuinfo | wc -l
free -m | grep Mem | awk '{print }'
free -m | grep Mem | awk '{print $2}'
df -h --total | grep total | awk '{print $2}'
top -bn1 | grep Cpu | awk '{print $2}'
who -b
cat /etc/fstab | grep /dev/mapper | wc -l
lsof -ni -sTCP:ESTABLISHED | wc -l
lsof -ni -sTCP:ESTABLISHED
w | head -n 1 |awk '{print $4}'
ip addr | grep 'inet ' | tr -t / ' ' | awk '{print $2}' | grep -v 127 | head -n 1
ip addr | grep link/ether | awk '{print $2}' | head -n 1
mkdir /var/log/sudo
touch /var/log/sudo/sudo_logs
echo "Defaults logfile=/var/log/sudo/sudo_logs" >>/etc/sudoers.d/sudo_config
cat /var/log/sudo/sudo_logs | grep -i command | wc -l
ss -tlnp


